import logging
import asyncio
from datetime import datetime, time

from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types.input_file import FSInputFile

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from dotenv import load_dotenv
import os

from add_mood_to_db import *
from plot_visualisaion import make_and_save_plot

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv("config.env")
BOT_TOKEN = os.getenv('TOKEN')
ADMIN_ID = os.getenv('ADMINID')

conn = connect_db()
conn2 = connect_db(db_name="users.db")


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏) ---
# user_data = { user_id: {"moods": [(timestamp, mood_text)], "notification_time": "HH:MM"} }
user_data = {}
user_time_zone = None

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class UserStates(StatesGroup):
    waiting_for_notification_time = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
bot = Bot(token=BOT_TOKEN)
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data="record_mood")],
        [InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏", callback_data="set_notification_time")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_mood_selection_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ", callback_data="mood_positive")],
        [InlineKeyboardButton(text="üò© –£—Å—Ç–∞–≤—à–µ–µ", callback_data="mood_tired")],
        [InlineKeyboardButton(text="üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ", callback_data="mood_sad")],
        [InlineKeyboardButton(text="üò† –ó–ª–æ–µ", callback_data="mood_angry")],
        [InlineKeyboardButton(text="ü§© –í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", callback_data="mood_delighted")],
        [InlineKeyboardButton(text="üòñ –†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ–µ", callback_data="mood_irritated")],
        [InlineKeyboardButton(text="üôÇ –°–ø–æ–∫–æ–π–Ω–æ–µ", callback_data="mood_calm")],
        [InlineKeyboardButton(text="‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", callback_data="mood_energetic")],
        [InlineKeyboardButton(text="üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ–µ", callback_data="mood_anxious")],
        [InlineKeyboardButton(text="ü§Ø –í–æ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ", callback_data="mood_inspired")],
        [InlineKeyboardButton(text="ü´† –°–∫—É—á–∞—é—â–µ–µ", callback_data="mood_bored")],
        [InlineKeyboardButton(text="ü•∞ –í–ª—é–±–ª—ë–Ω–Ω–æ–µ", callback_data="mood_loving")],
        [InlineKeyboardButton(text="ü•± –ë–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ–µ", callback_data="mood_indifferent")],
        [InlineKeyboardButton(text="üò± –ò—Å–ø—É–≥–∞–Ω–Ω–æ–µ", callback_data="mood_scared")],
        [InlineKeyboardButton(text="üòé –ì–æ—Ä–¥–æ–µ", callback_data="mood_proud")],
        [InlineKeyboardButton(text="üòí –ó–∞–≤–∏—Å—Ç–ª–∏–≤–æ–µ", callback_data="mood_envious")],
        [InlineKeyboardButton(text="üòì –†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ–µ", callback_data="mood_confused")],
        [InlineKeyboardButton(text="üòè –ò–≥—Ä–∏–≤–æ–µ", callback_data="mood_playful")],
        [InlineKeyboardButton(text="ü§î –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ–µ", callback_data="mood_focused")],
        [InlineKeyboardButton(text="ü§ß –ë–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ–µ", callback_data="mood_sick")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
async def send_mood_prompt(user_id: int):
    try:
        await bot.send_message(
            user_id,
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.", reply_markup=get_mood_selection_keyboard() # –∏–ª–∏ —Ç–∞–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–∑—É –≤—ã–±–æ—Ä
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if "bot was blocked by the user" in str(e).lower():
            remove_schedule(user_id)
            if user_id in user_data:
                del user_data[user_id]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ó–∞–¥–∞–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")


def schedule_mood_prompt(user_id: int, time_str: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        hour, minute = map(int, time_str.split(':'))
        job_id = f"mood_prompt_{user_id}"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
            logger.info(f"–°—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ {job_id} —É–¥–∞–ª–µ–Ω–æ.")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        scheduler.add_job(
            send_mood_prompt,
            trigger=CronTrigger(hour=hour, minute=minute, timezone="Europe/Moscow"), # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            args=[user_id],
            id=job_id,
            replace_existing=True
        )
        logger.info(f"–ó–∞–¥–∞–Ω–∏–µ {job_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è {user_id} –Ω–∞ {time_str}: {e}")
        return False

def remove_schedule(user_id: int):
    job_id = f"mood_prompt_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        logger.info(f"–ó–∞–¥–∞–Ω–∏–µ {job_id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def send_welcome(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        user_data[user_id] = {"moods": [], "notification_time": None}
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –î–∞–≤–∞–π –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(Command("menu"))
async def command_menu(message: Message):
    await message.answer(
        "–í–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@dp.callback_query(lambda c: c.data == "record_mood")
async def process_record_mood_callback(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–µ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:",
        reply_markup=get_mood_selection_keyboard()
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith("mood_"))
async def process_mood_selection_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    mood_choice_code = callback_query.data.split("_")[1]

    mood_map = {
        "positive": "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ üòä",
        "tired": "–£—Å—Ç–∞–ª–æ–µ üò©",
        "sad": "–ì—Ä—É—Å—Ç–Ω–æ–µ üò¢",
        "angry": "–ó–ª–æ–µ üò†",
        "delighted": "–í–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ–µ ü§©",
        "irritated": "–†–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω–æ–µ üòñ",
        "calm": "–°–ø–æ–∫–æ–π–Ω–æ–µ üôÇ",
        "energetic": "–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ ‚ö°Ô∏è",
        "anxious": "–¢—Ä–µ–≤–æ–∂–Ω–æ–µ üò∞",
        "inspired": "–í–æ–æ–¥—É—à–µ–≤–ª—ë–Ω–Ω–æ–µ ü§Ø",
        "bored": "–°–∫—É—á–∞—é—â–µ–µ ü´†",
        "loving": "–í–ª—é–±–ª—ë–Ω–Ω–æ–µ ü•∞",
        "indifferent": "–ë–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ–µ ü•±",
        "scared": "–ò—Å–ø—É–≥–∞–Ω–Ω–æ–µ üò±",
        "proud": "–ì–æ—Ä–¥–æ–µ üòé",
        "envious": "–ó–∞–≤–∏—Å—Ç–ª–∏–≤–æ–µ üòí",
        "confused": "–†–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ–µ üòì",
        "playful": "–ò–≥—Ä–∏–≤–æ–µ üòè",
        "focused": "–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ–µ ü§î",
        "sick": "–ë–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ–µ ü§ß"
    }
    mood_text = mood_map.get(mood_choice_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ")

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    mood_ID = list(mood_map.keys()).index(mood_choice_code)

    if user_id not in user_data:
        user_data[user_id] = {"moods": [], "notification_time": None}

    user_data[user_id]["moods"].append((timestamp, mood_text))
    add_mood(conn, user_id=user_id, mood=mood_text, mood_id=mood_ID)
    # conn.close()

    await callback_query.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ '{mood_text}' –∑–∞–ø–∏—Å–∞–Ω–æ!\n–°–ø–∞—Å–∏–±–æ! ‚ú®",
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    )
    await callback_query.answer(text=f"–ó–∞–ø–∏—Å–∞–Ω–æ: {mood_text}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–∏—Å–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_text}")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥
    await callback_query.message.answer(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=get_main_menu_keyboard()
    )


@dp.callback_query(lambda c: c.data == "set_notification_time")
async def process_set_time_callback(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserStates.waiting_for_notification_time)
    current_time_info = ""
    if user_data.get(callback_query.from_user.id, {}).get("notification_time"):
        current_time_info = f"\n–¢–µ–∫—É—â–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {user_data[callback_query.from_user.id]['notification_time']}"

    await callback_query.message.edit_text(
        "üïí –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30 –∏–ª–∏ 18:05) "
        "—Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è?"
        f"{current_time_info}\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        reply_markup=None
    )
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
@dp.message(UserStates.waiting_for_notification_time)
async def process_time_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    time_str = message.text.strip()

    if time_str.lower() == "/cancel":
        await state.clear()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu_keyboard())
        return

    try:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        parsed_time = time.fromisoformat(time_str) # HH:MM –∏–ª–∏ HH:MM:SS
        valid_time_str = parsed_time.strftime("%H:%M") # –ü—Ä–∏–≤–æ–¥–∏–º –∫ HH:MM
        user_time = valid_time_str # –í—Ä–µ–º—è, –∫–æ—Ç–æ–ª—Ä–æ–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å—Å—è —É —é–∑–µ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

        plus_to_time = get_time_zone(conn2, user_id)

        # –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É
        if plus_to_time != 0 or plus_to_time != None:
            new_hour = int(valid_time_str[:2]) - int(eval(plus_to_time))
            if 0 <= new_hour <= 9: 
                valid_time_str = "0" + str(new_hour) + valid_time_str[2:]
            elif new_hour < 0: 
                new_hour = 24 - abs(new_hour)
                valid_time_str = str(new_hour) + valid_time_str[2:]
            else:
                valid_time_str = str(new_hour) + valid_time_str[2:]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        if check_user_in_table(conn=conn2, user_id=user_id) == False: # –ï—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
            add_user_notification(conn=conn2, user_id=user_id, time=valid_time_str, time_zone=user_time_zone)
        else:
            if user_id in check_user_in_table(conn=conn2, user_id=user_id): # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
                update_time_notification(conn2, user_id, valid_time_str)
            else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
                if user_time_zone == None:
                    add_user_notification(conn=conn2, user_id=user_id, time=valid_time_str)
                else:
                    add_user_notification(conn=conn2, user_id=user_id, time=valid_time_str, time_zone=user_time_zone)

        if schedule_mood_prompt(user_id, valid_time_str):
            await message.answer(
                f"–û—Ç–ª–∏—á–Ω–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {user_time}.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard() # –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
            )
        await state.clear()

    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00 –∏–ª–∏ 21:30).\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ {time_str} –æ—Ç {user_id}: {e}")
        await message.answer(
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ---
@dp.message(Command("mydata"))
async def show_my_data(message: Message):
    all_moods = get_all_moods(conn)
    user_id = message.from_user.id
    if all_moods != []:
        data_str = f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        # if user_data[user_id]["notification_time"]:
        #     data_str += f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_data[user_id]['notification_time']}\n"
        # else:
        #     data_str += "–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"

        data_str += "–ó–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:\n"
        if all_moods != []:
            all_moods = get_all_moods(conn)
            five_moods = reversed(all_moods[-5:])
            for record in five_moods:
                data_str += f"  - {record[2]}: {record[1]}\n"
        else:
            data_str += "  –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
        data_str += "–í—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π."
        await message.answer(data_str)
    else:
        await message.answer("–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—Å.")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
@dp.message(Command("mood_plot"))
async def show_my_mood_plot(message: Message):
    year = str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))[:4]
    months_list = ["–Ø–Ω–≤–∞—Ä—å", '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    month = months_list[int(str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))[6:7]) - 1]
    path_to_plot = make_and_save_plot(message.from_user.id, month)
    photo = FSInputFile(path_to_plot)
    await bot.send_photo(message.chat.id, photo=photo, caption=f"–í–æ—Ç –≤–∞—à–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞ {month} {year} –≥–æ–¥(–∞)")

def get_timezone_keyboard():
    timezones = [
        {'label': '–ú–°–ö (UTC+3)', 'offset': 0},
        {'label': '–ú–°–ö-1 (UTC+2)', 'offset': -1},
        {'label': '–ú–°–ö+1 (UTC+4)', 'offset': 1},
        {'label': '–ú–°–ö+2 (UTC+5)', 'offset': 2},
        {'label': '–ú–°–ö+3 (UTC+6)', 'offset': 3},
        {'label': '–ú–°–ö+4 (UTC+7)', 'offset': 4},
        {'label': '–ú–°–ö+5 (UTC+8)', 'offset': 5},
        {'label': '–ú–°–ö-2 (UTC+1)', 'offset': -2},
        {'label': '–ú–°–ö-3 (UTC+0)', 'offset': -3},
    ]
    keyboard = [ [InlineKeyboardButton(text=tz['label'], callback_data=f"timezone_{tz['offset']}")] for tz in timezones]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("set_timezone"))
async def send_timezone_keyboard(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–°–ö:", reply_markup=get_timezone_keyboard())

@dp.callback_query(lambda c: c.data.startswith("timezone_"))
async def handle_timezone_choice(callback: CallbackQuery):
    global user_time_zone
    offset = int(callback.data.split("_")[1])
    user_time_zone = f"{offset:+d}"
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–°–ö{offset:+d}")
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–°–ö{offset:+d}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_id = callback.from_user.id
    if check_user_in_table(conn=conn2, user_id=user_id) == False: # –ï—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
        pass
    else:
        if user_id in check_user_in_table(conn=conn2, user_id=user_id): # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
            update_time_zone(conn2, user_id, user_time_zone)

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())